{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Rating","rating","this","props","MovieCard","key","movie","title","subtitle","storyline","imagePath","src","alt","MovieList","movies","map","App","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAYeA,E,4JATb,WACE,OACE,4BAAQC,UAAU,cAChB,wD,GAJaC,aCgBNC,E,4JAdb,WACE,IAAQC,EAAWC,KAAKC,MAAhBF,OACR,OACE,yBAAKH,UAAU,sBACb,uBAAGA,UAAU,UAAWG,Q,GALXF,aC+BNK,E,4JA7Bb,WACE,IAAQC,EAAQH,KAAKC,MAAbE,IACR,EAAqEH,KAAKC,MAAlEG,MAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,SAAUC,EAAlC,EAAkCA,UAAWC,EAA7C,EAA6CA,UAAWT,EAAxD,EAAwDA,OAExD,OACE,yBAAKH,UAAU,aAAaO,IAAMA,GAChC,yBAAKP,UAAU,mBAAmBa,IAAMD,EAAYE,IAAI,UACxD,yBAAKd,UAAU,mBACb,wBAAIA,UAAU,oBAAqBS,GACnC,wBAAIT,UAAU,uBAAwBU,GACtC,uBAAGV,UAAU,wBAAyBW,IAExC,kBAAC,EAAD,CAAQR,OAASA,S,GAbDF,aCeTc,E,4JAdb,WACE,IAAQC,EAAWZ,KAAKC,MAAhBW,OACR,OACE,yBAAKhB,UAAU,cACXgB,EAAOC,KAAI,SAACT,GAAD,OAAW,kBAAC,EAAD,CAAWD,IAAMC,EAAMC,MAAQD,MAAQA,Y,GAL/CP,aCkCTe,EAtCA,CACb,CACEP,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXR,OAAQ,IACRS,UAAW,2CAEb,CACEH,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXR,OAAQ,IACRS,UAAW,2CAEb,CACEH,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXR,OAAQ,EACRS,UAAW,qCAEb,CACEH,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXR,OAAQ,IACRS,UAAW,8BAEb,CACEH,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXR,OAAQ,IACRS,UAAW,sC,MCnBAM,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWF,OAASG,MCENC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.7efba9ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"page-title\">\r\n        <h1>Movie Cards Library</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Rating extends Component {\r\n  render() {\r\n    const { rating } = this.props;\r\n    return (\r\n      <div className=\"movie-card-rating \">\r\n        <p className=\"rating\">{ rating }</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRating.propTypes = {\r\n  rating: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Rating;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Rating from './Rating';\r\n\r\nclass MovieCard extends Component {\r\n  render() {\r\n    const { key } = this.props;\r\n    const { movie: { title, subtitle, storyline, imagePath, rating } } = this.props;\r\n\r\n    return (\r\n      <div className=\"movie-card\" key={ key }>\r\n        <img className=\"movie-card-image\" src={ imagePath } alt=\"Movie\" />\r\n        <div className=\"movie-card-body\">\r\n          <h4 className=\"movie-card-title\">{ title }</h4>\r\n          <h5 className=\"movie-card-subtitle\">{ subtitle }</h5>\r\n          <p className=\"movie-card-storyline\">{ storyline }</p>\r\n        </div>\r\n        <Rating rating={ rating } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  key: PropTypes.string.isRequired,\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    subtitle: PropTypes.string.isRequired,\r\n    storyline: PropTypes.string.isRequired,\r\n    imagePath: PropTypes.string.isRequired,\r\n    rating: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default MovieCard;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MovieCard from './MovieCard';\r\n\r\nclass MovieList extends Component {\r\n  render() {\r\n    const { movies } = this.props;\r\n    return (\r\n      <div className=\"movie-list\">\r\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default MovieList;\r\n","const movies = [\r\n  {\r\n    title: 'Kingsglaive',\r\n    subtitle: 'Final Fantasy XV',\r\n    storyline: 'King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire\\'s plans to steal the sacred crystal.',\r\n    rating: 4.5,\r\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\r\n  },\r\n  {\r\n    title: 'Final Fantasy',\r\n    subtitle: 'Spirits Within',\r\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\r\n    rating: 4.5,\r\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\r\n  },\r\n  {\r\n    title: 'Ghost In The Shell',\r\n    subtitle: 'Ghost In The Shell',\r\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\r\n    rating: 5,\r\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\r\n  },\r\n  {\r\n    title: 'Appleseed Alpha',\r\n    subtitle: 'Appleseed Alpha',\r\n    storyline: 'A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human\\'s future hope, the legendary city of Olympus.',\r\n    rating: 3.8,\r\n    imagePath: 'images/Appleseed_Alpha.jpg',\r\n  },\r\n  {\r\n    title: 'Resident Evil',\r\n    subtitle: 'Vendetta',\r\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\r\n    rating: 4.2,\r\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\r\n  },\r\n];\r\n\r\nexport default movies;\r\n","import React from 'react';\r\nimport Header from './components/Header';\r\nimport MovieList from './components/MovieList';\r\nimport data from './data';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <MovieList movies={ data } />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}